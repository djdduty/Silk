Material "PointLightPass"
{
    Shader
    {
        VertexModule "SetGLPosition" 0
        {
            float Radius = (1.0 / sqrt(u_Lights[0].QAtt * 0.001));
            gl_Position = u_MVP * vec4((a_Position * Radius),1.0);
        }
        FragmentModule "SetTexCoords" 0
        {
            vec2 sTexCoord = gl_FragCoord.xy / u_Resolution;
        }
        FragmentModule "SetColor" 1
        {
            vec4 Position = texture(u_FragPosition,sTexCoord);

            vec3 SurfaceToLight = u_Lights[0].Position.xyz - Position.xyz;
            float Dist = length(SurfaceToLight);
            float Attenuation = 1.0 / (u_Lights[0].CAtt + (u_Lights[0].LAtt * Dist) * (u_Lights[0].QAtt * pow(Dist,2.0)));
            if(Attenuation < 0.00001) discard;
            SurfaceToLight /= Dist;

            vec4  Normal     = texture(u_FragNormal,sTexCoord);
            float Lambertian = max(dot(Normal.xyz,SurfaceToLight),0.0);
            vec4  Material0  = texture(u_FragMaterial0,sTexCoord);
            float Specular   = 0.0;
            if(Lambertian > 0.0)
            {
                vec3 ViewDir = normalize(u_CameraPosition - Position.xyz);
                vec3 HalfDir = normalize(SurfaceToLight + ViewDir);
                float sAngle = max(dot(HalfDir,Normal.xyz),0.0);
                Specular     = pow(sAngle,Material0.y * 128.0f);
            }

            vec4 ColorLinear    = (Attenuation * u_Lights[0].Power * ((Lambertian * u_Lights[0].Color))) + (Material0.x * Specular * u_Lights[0].Color);
            vec4 GammaCorrected = pow(ColorLinear,vec4(vec3(1.0 / u_Gamma), 1));

            vec4 sColor = GammaCorrected;
        }
        Requires
        {
            //Uniforms
            ObjectData
            RenderData
            MaterialData

            //Attributes
            a_Position
            a_TexCoord
        }
        VertexOutputs
        {
            a_TexCoord
        }
        TextureMaps
        {
            u_FragColor
            u_FragNormal
            u_FragPosition
            u_FragMaterial0
        }
        Outputs
        {
            f_Color
        }
    }
}
