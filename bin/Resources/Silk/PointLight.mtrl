Material "PointLightPass"
{
    Shader
    {
        //Remove this module once there are light volumes
        VertexModule "SetGLPosition" 0
        {
            gl_Position = vec4(a_Position,1.0);
        }
        VertexModule "SetTexCoords" 1
        {
            o_TexCoord = a_TexCoord;
        }
        FragmentModule "SetColor" 0
        {
            vec4 Position = texture(u_FragPosition,o_TexCoord);
            
            vec3 SurfaceToLight = u_Lights[0].Position.xyz - Position.xyz;
            float Dist = length(SurfaceToLight);
            float Attenuation = 1.0 / (u_Lights[0].CAtt + (u_Lights[0].LAtt * Dist) * (u_Lights[0].QAtt * pow(Dist,2.0)));
            if(Attenuation < 0.00001) discard;
            SurfaceToLight /= Dist;
            
            vec4  Normal     = texture(u_FragNormal,o_TexCoord);
            float Lambertian = max(dot(Normal.xyz,SurfaceToLight),0.0);
            float Specular   = 0.0;
            if(Lambertian > 0.0)
            {
                vec3 ViewDir = normalize(u_CameraDirection);
                vec3 HalfDir = normalize(SurfaceToLight + ViewDir);
                float sAngle = max(dot(HalfDir,Normal.xyz),0.0);
                Specular     = pow(sAngle,u_Shininess);
            }
            
            vec4 Diffuse        = texture(u_FragColor,o_TexCoord);
            vec3 ColorLinear    = Attenuation * u_Lights[0].Power * ((Lambertian * Diffuse.xyz) + (sSpecular * Specular * Diffuse.xyz));
            vec3 GammaCorrected = pow(ColorLinear,vec3(1.0 / u_Gamma));
            
            vec4 sColor = vec4(GammaCorrected,Diffuse.a);
        }
        Requires
        {
            //Uniforms
            ObjectData
            RenderData
            MaterialData
            
            //Attributes
            a_Position
            a_TexCoord
        }
        VertexOutputs
        {
            a_TexCoord
        }
        TextureMaps
        {
            u_FragColor
            u_FragNormal
            u_FragPosition
        }
        Outputs
        {
            f_Color
        }
    }
}