Effect "FXAA"
{
    Stage
    {
        Material "SSAO_Pass"
        {
            Shader
            {
                VertexModule "SetGLPosition" 0
                {
                    gl_Position = vec4(a_Position,1.0);
                }
                VertexModule "SetTexCoords" 1
                {
                    o_TexCoord = a_TexCoord;
                }
                FragmentFunction 0
                {
                    mat3 CreateTBN(vec3 SurfaceNormal,vec3 RandomNormal)
                    {
                        // Gramâ€“Schmidt process to construct an orthogonal basis.
                        vec3 t = normalize(RandomNormal - SurfaceNormal * dot(RandomNormal,SurfaceNormal));
                        vec3 b = cross(SurfaceNormal,t);
                        return mat3(t,b,SurfaceNormal);
                    }
                }
                FragmentModule "SetColor" 0
                {
                    vec4 Pos = u_View * vec4(texture(u_FragPosition,o_TexCoord).xyz,1.0);
                    vec3 Nrm = mat3(u_View) * texture(u_FragNormal  ,o_TexCoord).xyz;
                    float Depth = u_FarPlane - Pos.z;

                    vec2 NoiseScale = u_Resolution / float(NoiseStretch);
                    vec3 RandomVec = texture(u_CustomMap0,o_TexCoord * NoiseScale).xyz;
                    mat3 TBN = CreateTBN(Nrm,RandomVec);

                    vec4 sColor = vec4(0,0,0,0);
                    float AO = 0.0;
                    for(int i = 0;i < KernelSize;i++)
                    {
                        vec3 SamplePos = Pos.xyz + (TBN * Kernel[i]) * SampleRadius;
                        vec4 Offset = vec4(SamplePos,1.0);
                        Offset = u_Projection * Offset;
                        Offset.xy /= Offset.w;
                        Offset.xy = Offset.xy * 0.5 + vec2(0.5);

                        float SampleDepth = u_FarPlane - (u_View * vec4(texture(u_FragPosition,Offset.xy).xyz,1.0)).z;

                        if(abs(Depth - SampleDepth) < SampleRadius)
                        {
                            AO += step(SampleDepth,u_FarPlane - SamplePos.z);
                        }
                    }
                    AO = (AO / float(KernelSize));
                    sColor = vec4(0,0,0,AO * Strength);
                }
                Uniforms "Inputs"
                {
                    vec3  Kernel[32]
                    int   KernelSize   = 32
                    float SampleRadius = 5.0
                    float Strength     = 1.0
                    int   NoiseStretch = 4
                }
                Requires
                {
                    //Uniforms
                    RenderData
                    Inputs

                    //Attributes
                    a_Position
                    a_TexCoord
                }
                VertexOutputs
                {
                    a_TexCoord
                }
                TextureMaps
                {
                    u_FragColor
                    u_FragNormal
                    u_FragPosition
                    u_CustomMap0
                }
                Outputs
                {
                    f_Color
                }
            }
        }
        ResolutionScale 0.375
        Iterations 1
        OutputType ubyte

        Requires
        {
            f_Color
        }
    }
    Stage
    {
        Material "SSAO_Blur"
        {
            Shader
            {
                VertexModule "SetGLPosition" 0
                {
                    gl_Position = vec4(a_Position,1.0);
                }
                VertexModule "SetTexCoords" 1
                {
                    o_TexCoord = a_TexCoord;
                }
                FragmentModule "SetColor" 0
                {
                    vec4 sColor = vec4(0,0,0,0);
                    vec2 TexelSize = 1.0 / vec2(textureSize(u_PostProcessOut,0));
                    float Result = 0.0;
                    vec2 hlim = vec2(-float(BlurRadius) * 0.5 + 0.5);

                    for(int i = 0;i < BlurRadius;i++)
                    {
                        for(int j = 0;j < BlurRadius;j++)
                        {
                             vec2 Offset = (hlim + vec2(float(i),float(j))) * TexelSize;
                             Result += texture(u_PostProcessOut,o_TexCoord + Offset).a;
                        }
                    }

                    sColor = vec4(0,0,0,Result / float(BlurRadius * BlurRadius));
                }
                Uniforms "Inputs"
                {
                    int BlurRadius = 4
                }
                Requires
                {
                    //Uniforms
                    RenderData
                    Inputs

                    //Attributes
                    a_Position
                    a_TexCoord
                }
                VertexOutputs
                {
                    a_TexCoord
                }
                TextureMaps
                {
                    u_PostProcessOut
                }
                Outputs
                {
                    f_Color
                }
            }
        }
        ResolutionScale 0.375
        Iterations 1
        OutputType ubyte

        Requires
        {
            f_Color
        }
    }
}
