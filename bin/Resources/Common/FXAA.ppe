Effect "FXAA"
{
    Stage
    {
        Material "FXAA_Pass"
        {
            Shader
            {
                VertexModule "SetGLPosition" 0
                {
                    gl_Position = vec4(a_Position,1.0);
                }
                VertexModule "SetTexCoords" 1
                {
                    o_TexCoord = a_TexCoord;
                }
                FragmentFunction 0
                {
                    vec4 FXAA()
                    {
                        float R_fxaaSpanMax = 8.0;

                        vec2 InverseRes = vec2(1.0 / u_Resolution.x,1.0 / u_Resolution.y);

                        vec3  luma   = vec3(0.299, 0.587, 0.114);
                        float lumaTL = dot(texture(u_FragColor,o_TexCoord + (vec2(-1,-1) * InverseRes)).xyz, luma);
                        float lumaTR = dot(texture(u_FragColor,o_TexCoord + (vec2( 1,-1) * InverseRes)).xyz, luma);
                        float lumaBL = dot(texture(u_FragColor,o_TexCoord + (vec2(-1, 1) * InverseRes)).xyz, luma);
                        float lumaBR = dot(texture(u_FragColor,o_TexCoord + (vec2( 1, 1) * InverseRes)).xyz, luma);
                        float lumaM  = dot(texture(u_FragColor,o_TexCoord).xyz,  luma);

                        vec2 dir;
                        dir.x = -((lumaTL + lumaTR) - (lumaBL + lumaBR));
                        dir.y = ((lumaTL + lumaBR) - (lumaTR + lumaBR));

                        float inverseDirAdjustment = 1.0/min(abs(dir.x), abs(dir.y));

                        dir = min(vec2(R_fxaaSpanMax, R_fxaaSpanMax),
                            max(vec2(-R_fxaaSpanMax, -R_fxaaSpanMax), dir * inverseDirAdjustment)) * InverseRes.xy;

                        vec3 result1 = (1.0/2.0) * (
                            texture(u_FragColor, o_TexCoord.xy + (dir * vec2(1.0/3.0 - 0.5))).xyz +
                            texture(u_FragColor, o_TexCoord.xy + (dir * vec2(2.0/3.0 - 0.5))).xyz);

                        vec3 result2 = result1 * (1.0/2.0) + (1.0/4.0) * (
                            texture(u_FragColor, o_TexCoord.xy + (dir * vec2(0.0/3.0 - 0.5))).xyz +
                            texture(u_FragColor, o_TexCoord.xy + (dir * vec2(3.0/3.0 - 0.5))).xyz);

                        float lumaMin = min(lumaM, min(min(lumaTL, lumaTR), min(lumaBL, lumaBR)));
                        float lumaMax = max(lumaM, max(max(lumaTL, lumaTR), max(lumaBL, lumaBR)));
                        float lumaResult2 = dot(luma, result2);

                        if(lumaResult2 < lumaMin || lumaResult2 > lumaMax)
                            return vec4(result1, 1.0);
                        else
                            return vec4(result2, 1.0);
                    }
                }
                FragmentModule "SetColor" 0
                {
                    vec4 sColor = vec4(0,0,0,0);
                    //float StepSize = MaxRadius / float(Iterations);
                    //for(int i = 0;i < Iterations;i++)
                    //{
                    //    sColor += FXAA(StepSize * float(i + 1));
                    //}
                    if(o_TexCoord.y >= 0.5 && o_TexCoord.y <= 0.51) sColor = vec4(1,0,0,1);
                    else if(o_TexCoord.y > 0.5)
                        sColor = texture(u_FragColor, o_TexCoord.xy);
                    else
                        sColor = FXAA();
                }
                Uniforms "Params"
                {
                    float ReduceMin  = 0.0078125
                    float ReduceMul  = 0.125
                    float MaxRadius  = 10.0
                    int   Iterations = 5
                }
                Requires
                {
                    //Uniforms
                    Params
                    RenderData

                    //Attributes
                    a_Position
                    a_TexCoord
                }
                VertexOutputs
                {
                    a_TexCoord
                }
                TextureMaps
                {
                    u_FragColor
                }
                Outputs
                {
                    f_Color
                }
            }
        }
        Iterations 1
        OutputType ubyte

        Requires
        {
            f_Color
        }
    }
}
